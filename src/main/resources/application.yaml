spring:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  application:
    name: ListIn
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope: profile, email
            redirect-uri: ${OAUTH2_REDIRECT_PAGE_URI}
            authorization-grant-type: authorization_code

          facebook:
            client-id: YOUR_FACEBOOK_CLIENT_ID
            client-secret: YOUR_FACEBOOK_CLIENT_SECRET
            scope: public_profile, email
            redirect-uri: "{baseUrl}/login/oauth2/code/facebook"
            client-authentication-method: post
            authorization-grant-type: authorization_code

  elasticsearch:
    uris: ${ELASTIC_SEARCH_URI}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  data:
    redis:
      port: 6379
      host: redis
server:
  port: 8080
#  ssl:
#    enabled: true
#    key-store: classpath:keystore.p12
#    key-store-password: ${SERVER_SSL_KEY_STORE_PASSWORD}
#    key-store-type: ${SERVER_SSL_KEY_STORE_TYPE}
#    key-alias: ${SERVER_SSL_KEY_ALIAS}

application:
  security:
    jwt:
      secret-key: ${JWT_SECRET_KEY}
      expiration: 31536000000 # 365 days | 86400000 # 1 day  | 60000 1 minute (for testing)
      refresh-token:
        expiration: 31536000000 # 365 days| 604800000 # 7 days

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    s3:
      bucket:
        ${AWS_BUCKET_NAME}
      region: ${AWS_BUCKET_REGION}
      cache-control: "public, max-age=2592000"


aws:
  s3:
    bucket:
      link:
        ${AWS_BUCKET_LINK}


elasticsearch:
  index-name: ${ELASTIC_SEARCH_INDEX_NAME}